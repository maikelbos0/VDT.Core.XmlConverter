@page "/NodeConverter"

<h1>Node converter</h1>

<p>
    Any node type (except for <code>XmlNodeType.Element</code> which has more detailed options, see below) that is supported by <code>XmlReader</code> can be 
    converted by implementing the <code>INodeConverter</code> interface and assigning this custom implementation to the correct node type in the 
    <code>ConverterOptions</code> that are passed to the converter.
</p>

<p>
    The below example will convert any comments that match the selected criteria to a normal XML element.
</p>


<div class="row">
    <div class="col-12 col-md-6 col-xl-4">
        <div class="form-check mb-3">
            <input class="form-check-input" type="checkbox" id="applyParentElementFilter" checked="@ApplyParentElementFilter" @onchange="() => ApplyParentElementFilter = !ApplyParentElementFilter" />
            <label class="form-check-label" for="applyParentElementFilter">Apply parent element filter</label>
        </div>

        <div class="mb-3">
            <label for="parentElementFilter" class="form-label">Parent element name</label>
            <input type="text" class="form-control" id="parentElementFilter" @bind-value="@ParentElementFilter" />
        </div>
    </div>

    <div class="col-12 col-md-6 col-xl-4 mb-3 align-self-end">
        <button class="btn btn-primary w-100" @onclick="Convert">Convert</button>
    </div>
</div>


@code {
    private bool ApplyParentElementFilter { get; set; }
    private string? ParentElementFilter { get; set; }

    private void Convert() {
        
    }
}
