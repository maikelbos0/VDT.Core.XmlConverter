@page "/NodeConverter"

<h1>Node converter</h1>

<p>
    Any node type (except for <code>XmlNodeType.Element</code> which has more detailed options, see <a href="ElementConverter">Element converter</a>) that is 
    supported by <code>XmlReader</code> can be converted by implementing the <code>INodeConverter</code> interface and assigning this custom implementation to
    the correct node type in the <code>ConverterOptions</code> that are passed to the converter.
</p>

<p>
    The below example will convert any comments that match the selected criteria to a normal XML element.
</p>

<div class="row">
    <div class="col-12 mb-3">
        <label for="input" class="form-label">Input</label>
        <textarea class="form-control" id="input" @bind="@Input" rows="10" />
    </div>

    <div class="col-12 col-md-6 col-xl-4">
        <div class="form-check mb-3">
            <input class="form-check-input" type="checkbox" id="filterParentElementName" checked="@ExampleConverter.FilterParentElementName" @onchange="() => ExampleConverter.FilterParentElementName = !ExampleConverter.FilterParentElementName" />
            <label class="form-check-label" for="filterParentElementName">Filter on parent element name</label>
        </div>

        <div class="mb-3">
            <label for="validParentElementName" class="form-label">Parent element name</label>
            <input type="text" class="form-control" id="validParentElementName" @bind-value="@ExampleConverter.ValidParentElementName" />
        </div>
    </div>

    <div class="col-12 col-md-6 col-xl-4">
        <div class="form-check mb-3">
            <input class="form-check-input" type="checkbox" id="filterParentAttributeName" checked="@ExampleConverter.FilterParentAttributeName" @onchange="() => ExampleConverter.FilterParentAttributeName = !ExampleConverter.FilterParentAttributeName" />
            <label class="form-check-label" for="filterParentAttributeName">Filter on parent attribute name</label>
        </div>

        <div class="mb-3">
            <label for="validParentAttributeName" class="form-label">Parent attribute name</label>
            <input type="text" class="form-control" id="validParentAttributeName" @bind-value="@ExampleConverter.ValidParentAttributeName" />
        </div>
    </div>

    <div class="col-12 col-md-6 col-xl-4 mb-3 align-self-end">
        <button class="btn btn-primary w-100" @onclick="Convert">Convert</button>
    </div>

    @if (Output != null) {
        <div class="col-12 mb-3">
            <label for="output" class="form-label">Output</label>
            <textarea class="form-control" id="output" @bind="@Output" rows="10" />
        </div>
    }
</div>

@code {
    private string? Input { get; set; } = @"<Data>
    <!-- This comment will be left as-is -->
    <CommentData convert=""true""><!-- This comment will be turned into a text node --></CommentData>
</Data>";
    private string? Output { get; set; }
    private CommentToElementConverter ExampleConverter { get; } = new() {
        FilterParentElementName = true,
        ValidParentElementName = "CommentData",
        FilterParentAttributeName = true,
        ValidParentAttributeName = "convert"
    };
    private Converter Converter { get; }

    public NodeConverter() {
        Converter = new(new ConverterOptions() { CommentConverter = ExampleConverter });
    }

    private void Convert() {
        Output = Converter.Convert(Input ?? "");
    }

    class CommentToElementConverter : INodeConverter {
        public bool FilterParentElementName { get; set; }
        public string? ValidParentElementName { get; set; }
        public bool FilterParentAttributeName { get; set; }
        public string? ValidParentAttributeName { get; set; }

        public void Convert(TextWriter writer, NodeData data) {
            var shouldConvert = true;

            if (FilterParentElementName) {
                shouldConvert = shouldConvert && data.Ancestors.FirstOrDefault()?.Name == ValidParentElementName;
            }

            if (FilterParentAttributeName) {
                shouldConvert = shouldConvert && (data.Ancestors.FirstOrDefault()?.Attributes.ContainsKey(ValidParentAttributeName ?? "") ?? false);
            }

            if (shouldConvert) {
                writer.Write(data.Value.Trim());
            }
            else {
                writer.Write("<!--");
                writer.Write(data.Value);
                writer.Write("-->");
            }
        }
    }
}
