@page "/ElementConverter"

<h1>Element converter</h1>

<p>
    Nodes of type <code>XmlNodeType.Element</code> can be converted with the help of implementations of <code>IElementConverter</code>. Element converters can
    be added to the list of converters in <code>ConverterOptions.ElementConverters</code>. By default this list is empty and the 
    <code>ConverterOptions.DefaultElementConverter</code> will be used to convert all element nodes. Each converter in 
    <code>ConverterOptions.ElementConverters</code> will be considered for use in order from first to last, using the <code>IElementConverter.IsValidFor</code>
    method to determine if a converter can be used. Once found, only this converter will be used for the current element.
</p>

<p>
    The below example will convert elements according to the filters and rules you select.
</p>

<div class="row">
    <div class="col-12 mb-3">
        <label for="input" class="form-label">Input</label>
        <textarea class="form-control" id="input" @bind="@Input" rows="10" />
    </div>

    <div class="col-12 col-md-6 col-xl-4 mb-3 align-self-end">
        <button class="btn btn-primary w-100" @onclick="Convert">Convert</button>
    </div>
</div>

@if (Output != null) {
    <div class="row">
        <div class="col-12 mb-3">
            <label for="output" class="form-label">Output</label>
            <textarea class="form-control" id="output" @bind="@Output" rows="10" />
        </div>
    </div>
}

@code {
    private string? Input { get; set; } = @"<?xml version=""1.0"" encoding=""UTF-8"" ?>
<Data>
    <Element convert=""true"">This element will be converted.</Element>
    <Element>This element will not be converted.</Element>
</Data>";
    private string? Output { get; set; }
    private ExampleElementConverter ExampleConverter { get; } = new() {
        FilterElementName = true,
        ElementName = "Element",
        FilterAttributeName = true,
        AttributeName = "convert",
        NewElementName = "Value",
        AttributesToRemove = new() {
            "convert"
        },
        EnableContentRendering = true
    };
    private Converter Converter { get; }

    public ElementConverter() {
        Converter = new(new ConverterOptions() {
            ElementConverters = new() {
                ExampleConverter
            }
        });
    }

    private void Convert() {
        Output = Converter.Convert(Input ?? "");
    }

    public class ExampleElementConverter : IElementConverter {
        public bool FilterElementName { get; set; }
        public string? ElementName { get; set; }
        public bool FilterAttributeName { get; set; }
        public string? AttributeName { get; set; }
        public string? NewElementName { get; set; }
        public HashSet<string> AttributesToRemove { get; set; } = new();
        public bool EnableContentRendering { get; set; }

        public bool IsValidFor(ElementData elementData) => true;

        public void RenderStart(ElementData elementData, TextWriter writer) {
            writer.Write("<");
            writer.Write(elementData.Name);

            foreach (var attribute in elementData.Attributes) {
                writer.Write(" ");
                writer.Write(attribute.Key);
                writer.Write("=\"");
                writer.Write(SecurityElement.Escape(attribute.Value));
                writer.Write("\"");
            }

            if (elementData.IsSelfClosing) {
                writer.Write("/");
            }

            writer.Write(">");
        }

        public bool ShouldRenderContent(ElementData elementData) => EnableContentRendering;

        public void RenderEnd(ElementData elementData, TextWriter writer) {
            if (!elementData.IsSelfClosing) {
                writer.Write("</");
                writer.Write(elementData.Name);
                writer.Write(">");
            }
        }
    }
}
